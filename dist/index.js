!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["react","prop-types"],t):"object"==typeof exports?exports.Dropzone=t(require("react"),require("prop-types")):e.Dropzone=t(e.React,e.PropTypes)}(this,function(e,t){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(1),p=r(f),d=n(2),h=r(d),v=n(3),g=n(4),m=n(6),y=r(m),D=function(e){function t(e,n){a(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.renderChildren=function(e,t,n,o){return"function"==typeof e?e(c({},r.state,{isDragActive:t,isDragAccept:n,isDragReject:o})):e},r.composeHandlers=r.composeHandlers.bind(r),r.onClick=r.onClick.bind(r),r.onDocumentDrop=r.onDocumentDrop.bind(r),r.onDragEnter=r.onDragEnter.bind(r),r.onDragLeave=r.onDragLeave.bind(r),r.onDragOver=r.onDragOver.bind(r),r.onDragStart=r.onDragStart.bind(r),r.onDrop=r.onDrop.bind(r),r.onFileDialogCancel=r.onFileDialogCancel.bind(r),r.onInputElementClick=r.onInputElementClick.bind(r),r.setRef=r.setRef.bind(r),r.setRefs=r.setRefs.bind(r),r.isFileDialogActive=!1,r.state={draggedFiles:[],acceptedFiles:[],rejectedFiles:[]},r}return l(t,e),u(t,[{key:"componentDidMount",value:function(){var e=this.props.preventDropOnDocument;this.dragTargets=[],e&&(document.addEventListener("dragover",g.onDocumentDragOver,!1),document.addEventListener("drop",this.onDocumentDrop,!1)),this.fileInputEl.addEventListener("click",this.onInputElementClick,!1),document.body.onfocus=this.onFileDialogCancel}},{key:"componentWillUnmount",value:function(){this.props.preventDropOnDocument&&(document.removeEventListener("dragover",g.onDocumentDragOver),document.removeEventListener("drop",this.onDocumentDrop)),null!=this.fileInputEl&&this.fileInputEl.removeEventListener("click",this.onInputElementClick,!1),null!=document&&(document.body.onfocus=null)}},{key:"composeHandlers",value:function(e){return this.props.disabled?null:e}},{key:"onDocumentDrop",value:function(e){this.node&&this.node.contains(e.target)||(e.preventDefault(),this.dragTargets=[])}},{key:"onDragStart",value:function(e){this.props.onDragStart&&this.props.onDragStart.call(this,e)}},{key:"onDragEnter",value:function(e){e.preventDefault(),-1===this.dragTargets.indexOf(e.target)&&this.dragTargets.push(e.target);var t=(0,g.getDataTransferItems)(e),n=t.files;(t.isFiles||n&&n.length)&&(this.setState({isDragActive:!0,draggedFiles:n}),this.props.onDragEnter&&this.props.onDragEnter.call(this,e))}},{key:"onDragOver",value:function(e){e.preventDefault(),e.stopPropagation();try{e.dataTransfer.dropEffect=this.isFileDialogActive?"none":"copy"}catch(e){}return this.props.onDragOver&&this.props.onDragOver.call(this,e),!1}},{key:"onDragLeave",value:function(e){var t=this;e.preventDefault(),this.dragTargets=this.dragTargets.filter(function(n){return n!==e.target&&t.node.contains(n)}),this.dragTargets.length>0||(this.setState({isDragActive:!1,draggedFiles:[]}),this.props.onDragLeave&&this.props.onDragLeave.call(this,e))}},{key:"onDrop",value:function(e){var t=this,n=this.props,r=n.onDrop,o=n.onDropAccepted,a=n.onDropRejected,s=n.multiple,l=n.disablePreview,c=n.accept;e.preventDefault(),this.dragTargets=[],this.isFileDialogActive=!1,this.draggedFiles=null,this.setState({isDragActive:!1,draggedFiles:[]}),(0,v.getDroppedOrSelectedFiles)(e).then(function(n){var u=[],f=[];n.forEach(function(e){var n=e.fileObject;if(!l)try{n.preview=window.URL.createObjectURL(n)}catch(e){}(0,g.fileAccepted)(n,c)&&(0,g.fileMatchSize)(n,t.props.maxSize,t.props.minSize)?u.push(n):f.push(n)}),s||f.push.apply(f,i(u.splice(1))),r&&r.call(t,u,f,e),f.length>0&&a&&a.call(t,f,e),u.length>0&&o&&o.call(t,u,e)})}},{key:"onClick",value:function(e){var t=this.props,n=t.onClick;t.disableClick||(e.stopPropagation(),n&&n.call(this,e),(0,g.isIeOrEdge)()?setTimeout(this.open.bind(this),0):this.open())}},{key:"onInputElementClick",value:function(e){e.stopPropagation(),this.props.inputProps&&this.props.inputProps.onClick&&this.props.inputProps.onClick()}},{key:"onFileDialogCancel",value:function(){var e=this,t=this.props.onFileDialogCancel;this.isFileDialogActive&&setTimeout(function(){if(null!=e.fileInputEl){e.fileInputEl.files.length||(e.isFileDialogActive=!1)}"function"==typeof t&&t()},300)}},{key:"setRef",value:function(e){this.node=e}},{key:"setRefs",value:function(e){this.fileInputEl=e}},{key:"open",value:function(){this.isFileDialogActive=!0,this.fileInputEl.value=null,this.fileInputEl.click()}},{key:"render",value:function(){var e=this.props,t=e.accept,n=e.acceptClassName,r=e.activeClassName,i=e.children,a=e.disabled,s=e.disabledClassName,l=e.inputProps,u=e.multiple,f=e.name,d=e.rejectClassName,h=o(e,["accept","acceptClassName","activeClassName","children","disabled","disabledClassName","inputProps","multiple","name","rejectClassName"]),v=h.acceptStyle,m=h.activeStyle,D=h.className,b=void 0===D?"":D,x=h.disabledStyle,S=h.rejectStyle,O=h.style,E=o(h,["acceptStyle","activeStyle","className","disabledStyle","rejectStyle","style"]),C=this.state,P=C.isDragActive,j=C.draggedFiles,k=j.length,w=u||k<=1,F=k>0&&(0,g.allFilesAccepted)(j,this.props.accept),_=k>0&&(!F||!w),A=!(b||O||m||v||S||x);P&&r&&(b+=" "+r),F&&n&&(b+=" "+n),_&&d&&(b+=" "+d),a&&s&&(b+=" "+s),A&&(O=y.default.default,m=y.default.active,v=O.active,S=y.default.rejected,x=y.default.disabled);var T=c({},O);m&&P&&(T=c({},O,m)),v&&F&&(T=c({},T,v)),S&&_&&(T=c({},T,S)),x&&a&&(T=c({},O,x));var M={accept:t,disabled:a,type:"file",style:{display:"none"},multiple:g.supportMultiple&&u,ref:this.setRefs,onChange:this.onDrop,autoComplete:"off"};f&&f.length&&(M.name=f);var I=(E.acceptedFiles,E.preventDropOnDocument,E.disablePreview,E.disableClick,E.onDropAccepted,E.onDropRejected,E.onFileDialogCancel,E.maxSize,E.minSize,o(E,["acceptedFiles","preventDropOnDocument","disablePreview","disableClick","onDropAccepted","onDropRejected","onFileDialogCancel","maxSize","minSize"]));return p.default.createElement("div",c({className:b,style:T},I,{onClick:this.composeHandlers(this.onClick),onDragStart:this.composeHandlers(this.onDragStart),onDragEnter:this.composeHandlers(this.onDragEnter),onDragOver:this.composeHandlers(this.onDragOver),onDragLeave:this.composeHandlers(this.onDragLeave),onDrop:this.composeHandlers(this.onDrop),ref:this.setRef,"aria-disabled":a}),this.renderChildren(i,P,F,_),p.default.createElement("input",c({},l,M)))}}]),t}(p.default.Component);t.default=D,D.propTypes={accept:h.default.string,children:h.default.oneOfType([h.default.node,h.default.func]),disableClick:h.default.bool,disabled:h.default.bool,disablePreview:h.default.bool,preventDropOnDocument:h.default.bool,inputProps:h.default.object,multiple:h.default.bool,name:h.default.string,maxSize:h.default.number,minSize:h.default.number,className:h.default.string,activeClassName:h.default.string,acceptClassName:h.default.string,rejectClassName:h.default.string,disabledClassName:h.default.string,style:h.default.object,activeStyle:h.default.object,acceptStyle:h.default.object,rejectStyle:h.default.object,disabledStyle:h.default.object,onClick:h.default.func,onDrop:h.default.func,onDropAccepted:h.default.func,onDropRejected:h.default.func,onDragStart:h.default.func,onDragEnter:h.default.func,onDragOver:h.default.func,onDragLeave:h.default.func,onFileDialogCancel:h.default.func},D.defaultProps={preventDropOnDocument:!0,disabled:!1,disablePreview:!1,disableClick:!1,multiple:!0,maxSize:1/0,minSize:0},e.exports=t.default},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";function r(e){return u.indexOf(e.name)>=0}function o(e){var t=e.createReader();return new Promise(function(e){function n(){t.readEntries(function(t){t.length?(r.push(Promise.all(t.map(function(e){return e.isDirectory?o(e):Promise.resolve(e)}))),n()):e(Promise.all(r))},i)}var r=[],i=function(){};n()})}function i(e,t){return{fileObject:e,type:e.type?e.type:"",name:e.name,size:e.size,fullPath:t?t.fullPath:e.name}}function a(e){return new Promise(function(t){e.file(function(n){t(i(n,e))})})}function s(e,t){return Promise.all(e).then(function(e){return e.forEach(function(e){r(e)||t.push(e)}),t})}function l(e){var t=[],n=[],r=[];if([].slice.call(e.items).forEach(function(e){if("function"==typeof e.webkitGetAsEntry){var i=e.webkitGetAsEntry();i&&(i.isDirectory?n.push(o(i)):r.push(a(i)))}else t.push(e)}),n.length){var i=function e(t){return t.reduce(function(t,n){return t.concat(Array.isArray(n)?e(n):n)},[])};return Promise.all(n).then(function(e){return i(e).forEach(function(e){r.push(a(e))}),s(r,t)})}return r.length?s(r,t):Promise.resolve(t)}function c(e){var t=e.dataTransfer;if(t&&t.items)return l(t).then(function(e){return Promise.resolve(e)});for(var n=[],r=t&&t.files,o=e.target&&e.target.files,a=r||o||[],s=0;s<a.length;s+=1)n.push(i(a[s]));return Promise.resolve(n)}Object.defineProperty(t,"__esModule",{value:!0}),t.getDataTransferFiles=l,t.getDroppedOrSelectedFiles=c;var u=[".DS_Store","Thumbs.db"]},function(e,t,n){"use strict";function r(e){var t=!0,n=[];if(e.dataTransfer){var r=e.dataTransfer;if(r.files&&r.files.length)n=r.files;else if(r.items&&r.items.length){t=!1;for(var o=0;o<r.items.length;o+=1)"file"===r.items[o].kind&&n.push(r.items[o])}}else e.target&&e.target.files&&(n=e.target.files);return{files:Array.prototype.slice.call(n),isFiles:t}}function o(e,t){return"application/x-moz-file"===e.type||(0,p.default)(e,t)}function i(e,t,n){return e.size<=t&&e.size>=n}function a(e,t){return e.every(function(e){return o(e,t)})}function s(e){e.preventDefault()}function l(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}function c(e){return-1!==e.indexOf("Edge/")}function u(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return l(e)||c(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.supportMultiple=void 0,t.getDataTransferItems=r,t.fileAccepted=o,t.fileMatchSize=i,t.allFilesAccepted=a,t.onDocumentDragOver=s,t.isIeOrEdge=u;var f=n(5),p=function(e){return e&&e.__esModule?e:{default:e}}(f);t.supportMultiple="undefined"==typeof document||!document||!document.createElement||"multiple"in document.createElement("input")},function(e,t){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";t.__esModule=!0,n(8),n(9),t.default=function(e,t){if(e&&t){var n=function(){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",o=e.type||"",i=o.replace(/\/.*$/,"");return{v:n.some(function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):/\/\*$/.test(t)?i===t.replace(/\/.*$/,""):o===t})}}();if("object"==typeof n)return n.v}return!0},e.exports=t.default},function(e,t){var n=e.exports={version:"1.2.2"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(2),o=n(1),i=n(4),a=n(19),s="prototype",l=function(e,t){return function(){return e.apply(t,arguments)}},c=function(e,t,n){var u,f,p,d,h=e&c.G,v=e&c.P,g=h?r:e&c.S?r[t]||(r[t]={}):(r[t]||{})[s],m=h?o:o[t]||(o[t]={});h&&(n=t);for(u in n)f=!(e&c.F)&&g&&u in g,p=(f?g:n)[u],d=e&c.B&&f?l(p,r):v&&"function"==typeof p?l(Function.call,p):p,g&&!f&&a(g,u,p),m[u]!=p&&i(m,u,d),v&&((m[s]||(m[s]={}))[u]=p)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,e.exports=c},function(e,t,n){var r=n(5),o=n(18);e.exports=n(22)?function(e,t,n){return r.setDesc(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n=Object;e.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(20)("wks"),o=n(2).Symbol;e.exports=function(e){return r[e]||(r[e]=o&&o[e]||(o||n(6))("Symbol."+e))}},function(e,t,n){n(26),e.exports=n(1).Array.some},function(e,t,n){n(25),e.exports=n(1).String.endsWith},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(10);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n(7)("match")]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(16),o=n(11),i=n(7)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(2),o=n(4),i=n(6)("src"),a="toString",s=Function[a],l=(""+s).split(a);n(1).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,n,a){"function"==typeof n&&(o(n,i,e[t]?""+e[t]:l.join(String(t))),"name"in n||(n.name=t)),e===r?e[t]=n:(a||delete e[t],o(e,t,n))})(Function.prototype,a,function(){return"function"==typeof this&&this[i]||s.call(this)})},function(e,t,n){var r=n(2),o="__core-js_shared__",i=r[o]||(r[o]={});e.exports=function(e){return i[e]||(i[e]={})}},function(e,t,n){var r=n(17),o=n(13);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){e.exports=!n(15)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(23),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){"use strict";var r=n(3),o=n(24),i=n(21),a="endsWith",s=""[a];r(r.P+r.F*n(14)(a),"String",{endsWith:function(e){var t=i(this,e,a),n=arguments,r=n.length>1?n[1]:void 0,l=o(t.length),c=void 0===r?l:Math.min(o(r),l),u=String(e);return s?s.call(t,u,c):t.slice(c-u.length,c)===u}})},function(e,t,n){var r=n(5),o=n(3),i=n(1).Array||Array,a={},s=function(e,t){r.each.call(e.split(","),function(e){void 0==t&&e in i?a[e]=i[e]:e in[]&&(a[e]=n(12)(Function.call,[][e],t))})};s("pop,reverse,shift,keys,values,entries",1),s("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),s("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill"),o(o.S,"Array",a)}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={rejected:{borderStyle:"solid",borderColor:"#c66",backgroundColor:"#eee"},disabled:{opacity:.5},active:{borderStyle:"solid",borderColor:"#6c6",backgroundColor:"#eee"},default:{width:200,height:200,borderWidth:2,borderColor:"#666",borderStyle:"dashed",borderRadius:5}},e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,